"""Test spring module."""
import unittest
from unittest.mock import patch

from config.spring import ConfigServer


class TestUtils(unittest.TestCase):
    """Unit tests to spring module."""

    def setUp(self):
        """Mock of responses generated by Spring Cloud Config."""
        self.config_example = {
            "health": {
                "config": {
                    "enabled": False
                }
            },
            "spring": {
                "cloud": {
                    "consul": {
                        "discovery": {
                            "health-check-interval": "10s",
                            "health-check-path": "/manage/health",
                            "instance-id": "pecas-textos:${random.value}",
                            "prefer-ip-address": True,
                            "register-health-check": True
                        },
                        "host": "discovery",
                        "port": 8500
                    }
                }
            }
        }
        self.obj = ConfigServer()

    def test_get_config_failed(self):
        """Test failed to connect on configserver."""
        with self.assertRaises(SystemExit):
            self.obj.get_config()

    def test_get_config(self):
        pass

    def test_config_property(self):
        self.assertIsInstance(self.obj.config, dict)

    def test_url_property(self):
        self.assertIsInstance(self.obj.url, str)

    def test_get_attribute(self):
        pass

    @patch('config.spring.ConfigServer')
    def test_get_keys(self, ConfigMock):
        pass
